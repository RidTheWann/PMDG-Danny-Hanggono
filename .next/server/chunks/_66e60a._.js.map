{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/api/reports/route/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/reports/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const month = searchParams.get('month') || (new Date().getMonth() + 1).toString();\n    const year = searchParams.get('year') || new Date().getFullYear().toString();\n    \n    // Fetch data from Google Sheets\n    const sheetsUrl = process.env.GOOGLE_SHEETS_URL;\n    if (!sheetsUrl) {\n      throw new Error('Google Sheets URL not configured');\n    }\n\n    const response = await fetch(`${sheetsUrl}?action=get&month=${month}&year=${year}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch data from Google Sheets');\n    }\n\n    const data = await response.json();\n    const sheetData = data.data || [];\n\n    // Skip header row\n    const records = sheetData.slice(1);\n\n    // Process data for reports\n    const dailyData: { [key: string]: any } = {};\n    const treatmentCounts: { [key: string]: number } = {};\n    let totalPatients = 0;\n    let bpjsPatients = 0;\n    let umumPatients = 0;\n\n    records.forEach((row: any[]) => {\n      if (row.length === 0) return;\n      \n      const tanggalKunjungan = row[0];\n      const jenisPasien = row[5] || '';\n      \n      // Extract treatments\n      const treatments = {\n        obat: row[6] === 'Ya',\n        cabut_anak: row[7] === 'Ya',\n        cabut_dewasa: row[8] === 'Ya',\n        tambal_sementara: row[9] === 'Ya',\n        tambal_tetap: row[10] === 'Ya',\n        scaling: row[11] === 'Ya',\n        rujuk: row[12] === 'Ya',\n        lainnya: row[13] && row[13].trim() !== ''\n      };\n\n      // Count treatments\n      Object.entries(treatments).forEach(([treatment, isTrue]) => {\n        if (isTrue) {\n          treatmentCounts[treatment] = (treatmentCounts[treatment] || 0) + 1;\n        }\n      });\n\n      // Group by date\n      const dateKey = tanggalKunjungan.split('T')[0]; // Get YYYY-MM-DD format\n      if (!dailyData[dateKey]) {\n        dailyData[dateKey] = {\n          date: dateKey,\n          totalPatients: 0,\n          bpjsPatients: 0,\n          umumPatients: 0,\n          treatments: {}\n        };\n      }\n\n      dailyData[dateKey].totalPatients += 1;\n      \n      if (jenisPasien === 'BPJS') {\n        dailyData[dateKey].bpjsPatients += 1;\n        bpjsPatients += 1;\n      } else if (jenisPasien === 'UMUM') {\n        dailyData[dateKey].umumPatients += 1;\n        umumPatients += 1;\n      }\n\n      // Count daily treatments\n      Object.entries(treatments).forEach(([treatment, isTrue]) => {\n        if (isTrue) {\n          dailyData[dateKey].treatments[treatment] = (dailyData[dateKey].treatments[treatment] || 0) + 1;\n        }\n      });\n\n      totalPatients += 1;\n    });\n\n    // Find most popular treatment\n    const mostPopularTreatment = Object.entries(treatmentCounts)\n      .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Tidak ada';\n\n    // Convert to array and sort by date\n    const dailyDataArray = Object.values(dailyData).sort((a: any, b: any) => \n      new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n\n    // Calculate average per day\n    const daysInMonth = new Date(parseInt(year), parseInt(month), 0).getDate();\n    const averagePerDay = totalPatients / daysInMonth;\n\n    return NextResponse.json({\n      totalPatients,\n      bpjsPatients,\n      umumPatients,\n      averagePerDay,\n      mostPopularTreatment: getTreatmentLabel(mostPopularTreatment),\n      dailyData: dailyDataArray\n    });\n  } catch (error) {\n    console.error('Error generating report:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate report' },\n      { status: 500 }\n    );\n  }\n}\n\nfunction getTreatmentLabel(treatment: string): string {\n  const labels: { [key: string]: string } = {\n    obat: 'Obat',\n    cabut_anak: 'Cabut Anak',\n    cabut_dewasa: 'Cabut Dewasa',\n    tambal_sementara: 'Tambal Sementara',\n    tambal_tetap: 'Tambal Tetap',\n    scaling: 'Scaling',\n    rujuk: 'Rujuk',\n    lainnya: 'Lainnya'\n  };\n  \n  return labels[treatment] || treatment;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}